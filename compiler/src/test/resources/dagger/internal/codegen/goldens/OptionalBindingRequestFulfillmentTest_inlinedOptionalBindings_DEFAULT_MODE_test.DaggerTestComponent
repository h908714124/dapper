package test;

final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder maybeModule(Maybe.MaybeModule maybeModule) {
      Preconditions.checkNotNull(maybeModule);
      return this;
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {


    }

    @Override
    public Optional<Maybe> maybe() {
      return Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe());
    }

    @Override
    public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {
      return Optional.of(ProviderOfLazy.create(Maybe_MaybeModule_ProvideMaybeFactory.create()));
    }

    @Override
    public Optional<DefinitelyNot> definitelyNot() {
      return Optional.absent();
    }

    @Override
    public Optional<Provider<Lazy<DefinitelyNot>>> providerOfLazyOfDefinitelyNot() {
      return Optional.absent();
    }
  }
}

