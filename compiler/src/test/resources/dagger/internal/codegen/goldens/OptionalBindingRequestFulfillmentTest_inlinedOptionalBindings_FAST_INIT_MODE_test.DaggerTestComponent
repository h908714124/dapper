package test;

final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder maybeModule(Maybe.MaybeModule maybeModule) {
      Preconditions.checkNotNull(maybeModule);
      return this;
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private Provider<Maybe> provideMaybeProvider;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {

      initialize();

    }

    @Override
    public Optional<Maybe> maybe() {
      return Optional.of(provideMaybeProvider.get());
    }

    @Override
    public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {
      return Optional.of(ProviderOfLazy.create(provideMaybeProvider));
    }

    @Override
    public Optional<DefinitelyNot> definitelyNot() {
      return Optional.absent();
    }

    @Override
    public Optional<Provider<Lazy<DefinitelyNot>>> providerOfLazyOfDefinitelyNot() {
      return Optional.absent();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideMaybeProvider = new SwitchingProvider<>(testComponentImpl, 0);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final TestComponentImpl testComponentImpl;

      private final int id;

      SwitchingProvider(TestComponentImpl testComponentImpl, int id) {
        this.testComponentImpl = testComponentImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // other.Maybe 
          return (T) Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}

