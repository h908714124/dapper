package test;

public final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImplShard {
    @SuppressWarnings("rawtypes")
    private Provider protectedTypeProvider;

    private final TestComponentImpl testComponentImpl;

    private TestComponentImplShard(TestComponentImpl testComponentImpl) {
      this.testComponentImpl = testComponentImpl;
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.protectedTypeProvider = DoubleCheck.provider(TestComponentBase_ProtectedType_Factory.create(TestComponentBase_Dep_Factory.create()));
    }
  }

  private static final class TestComponentImpl extends TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {

      testComponentImplShard = new TestComponentImplShard(testComponentImpl);
    }

    @Override
    test.sub.TestComponentBase.ProtectedType provideProtectedType() {
      return (test.sub.TestComponentBase.ProtectedType) testComponentImpl.testComponentImplShard.protectedTypeProvider.get();
    }
  }
}

