plugins {
    id('java')
    id('com.github.johnrengelman.shadow') version('6.1.0')
    id('maven-publish')
    id('signing')
}

group = 'io.github.jbock-java'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '11'
    targetCompatibility = '11'
    options.compilerArgs << '--release'
    options.compilerArgs << '11'
}

javadoc {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(GenerateModuleMetadata) {
    enabled = true
}

shadowJar {
    minimize()
    archiveClassifier.set('')
    relocate('com.squareup.javapoet', 'dagger.shaded.com.squareup.javapoet')
    relocate('org.checkerframework', 'dagger.shaded.org.checkerframework')
}

dependencies {
    def core = 'io.github.jbock-java:dapper:1.2'
    implementation('io.github.jbock-java:javapoet:1.14')
    shadow('io.github.jbock-java:auto-common:1.2.0')
    shadow(core)
    shadow('io.github.jbock-java:auto-value-annotations:1.8.2.0')
    annotationProcessor('io.github.jbock-java:auto-value:1.8.2.0')
    annotationProcessor('io.github.jbock-java:dapper-compiler:1.2')
    testImplementation(core)
    testImplementation('io.github.jbock-java:auto-value:1.8.2.0')
    testImplementation('io.github.jbock-java:compile-testing:0.19.10')
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.1')
    testImplementation('org.junit.vintage:junit-vintage-engine:5.8.1')
    testImplementation('org.hamcrest:hamcrest-core:2.2')
    testImplementation('org.assertj:assertj-core:3.21.0')
    // why is this necessary?
    testImplementation('com.google.errorprone:error_prone_annotations:2.4.0')
    // why is this necessary?
    testImplementation('com.google.code.findbugs:jsr305:3.0.2')
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'dagger.compiler',
                'Implementation-Version': project.properties['version']
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events('failed')
    }
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

artifacts {
    archives(javadocJar, sourcesJar)
}

// https://central.sonatype.org/pages/gradle.html
publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifactId = 'dapper-compiler'

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'dapper-compiler'
                packaging = 'jar'
                description = 'dapper annotation processor'
                url = 'https://github.com/jbock-java/dapper'

                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Various'
                        name = 'Various'
                        email = 'jbock-java@gmx.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jbock-java/dapper.git'
                    developerConnection = 'scm:git:https://github.com/jbock-java/dapper.git'
                    url = 'https://github.com/jbock-java/dapper'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('OSS_USER')
                password = System.getenv('OSS_PASS')
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
