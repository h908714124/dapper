#!/bin/bash

die () {
    echo "$*"
    exit 1
}

INPUT="$1"
if [[ -z "$INPUT" ]]; then
	die "usage: imports <filename>"
fi

unameOut="$(uname -s)"

function mysed () {
	if [[ "$unameOut" == "Darwin" ]]; then
		sed -i .bak "$1" $INPUT
		rm ${INPUT}.bak
	else
		sed -i "$1" $INPUT
	fi
}

function replace () {
	local A=$1
	local B=$2
	mysed "s/^import static $A/import static $B/g"
	mysed "s/^import $A/import $B/g"
}

function delete () {
	mysed "/${1}$/d"
}

mysed "s/^import com.google.common.base.Equivalence/import io.jbock.auto.common.Equivalence/"
mysed "s/^import com.google.common.base.Supplier;/import java.util.function.Supplier;/"
mysed  "s/^import com.google.common.base.Function;/import java.util.function.Function;/"
mysed "s/^import static kotlin.streams.jdk8.StreamsKt.asStream;/import static dagger.internal.codegen.base.Util.asStream;/"

replace com.google.auto.common. io.jbock.auto.common.
replace com.google.common.base. dagger.internal.codegen.base.
replace androidx.room.compiler.processing.compat.XConverters dagger.internal.codegen.xprocessing.XConverters
replace com.squareup.javapoet. io.jbock.javapoet.
replace androidx.room.compiler.processing. dagger.internal.codegen.xprocessing.
replace com.google.common.collect. dagger.internal.codegen.collect.
replace com.google.common.graph. io.jbock.common.graph.
replace com.google.auto.common. io.jbock.auto.common.
replace javax.inject. jakarta.inject.
replace com.google.auto.value.AutoValue io.jbock.auto.value.AutoValue
replace com.google.auto.value.extension.memoized.Memoized io.jbock.auto.value.extension.memoized.Memoized
replace dagger.internal.codegen.xprocessing.XTypeKt dagger.internal.codegen.xprocessing.XType
replace dagger.internal.codegen.xprocessing.XElementKt dagger.internal.codegen.xprocessing.XElement

delete "^import com.google.errorprone.annotations.CheckReturnValue;"
delete "@CheckReturnValue"
delete "^import com.google.errorprone.annotations.CanIgnoreReturnValue;"
delete "@CanIgnoreReturnValue"
delete "^import com.google.common.annotations.Beta;"
delete "@Beta"
delete "^import com.google.common.annotations.GwtCompatible;"
delete "@GwtCompatible"
delete "^import javax.annotation.CheckForNull;"
delete "^import org.checkerframework.checker.nullness.qual.Nullable;"
delete "@ElementTypesAreNonnullByDefault"
delete "^import dagger.internal.codegen.base.MapType;"
delete "^import dagger.internal.codegen.base.SetType;"
delete "^import static dagger.spi.model.BindingKind.COMPONENT_PRODUCTION;"
delete "^import static dagger.spi.model.BindingKind.OPTIONAL;"
delete "^import static dagger.spi.model.BindingKind.PRODUCTION;"
delete "^import static dagger.internal.codegen.binding.BindingType.PRODUCTION;"
delete "^import dagger.BindsOptionalOf;"
delete "^import dagger.internal.codegen.base.OptionalType;"
delete "^import dagger.multibindings.Multibinds;"
delete "^import static dagger.internal.codegen.binding.MapKeys.getMapKey;"
delete "^import static dagger.internal.codegen.binding.MapKeys.mapKeyType;"
delete "^import com.google.common.util.concurrent.FluentFuture;"
delete "^import com.google.common.util.concurrent.ListenableFuture;"
delete "^import static dagger.internal.codegen.base.Scopes.productionScope;"
delete "^import dagger.producers.CancellationPolicy;"
delete "^import dagger.producers.internal.ProductionExecutorModule;"
delete "^import dagger.producers.Produced;"
delete "^import dagger.producers.Producer;"
delete "^import org.checkerframework.checker.nullness.compatqual.NullableDecl;"
delete "^import com.google.errorprone.annotations.FormatMethod;"
delete "@FormatMethod"

mysed "s/<? extends @Nullable Object>/<?>/g"
mysed "s/@CheckForNull //g"
mysed "s/@Nullable //g"
mysed "s/@NullableDecl //g"
mysed "s/XElementKt::/XElement::/g"
mysed "s/com.google.auto.value.AutoValue/io.jbock.auto.value.AutoValue/g"
mysed "s/{@link dagger.multibindings/{@code dagger.multibindings/g"
mysed "s/{@link javax.inject./{@link jakarta.inject./g"
mysed "s/{@linkplain/{@code/g"
mysed "s/{@link/{@code/g"
